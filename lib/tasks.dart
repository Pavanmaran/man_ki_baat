import 'dart:io';import 'dart:typed_data';import 'package:date_time_format/date_time_format.dart';import 'package:flutter/cupertino.dart';import 'package:screenshot/screenshot.dart';import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/rendering.dart';import 'package:the_hidden_writters/admin.dart';import 'package:the_hidden_writters/commentbox.dart';import 'package:the_hidden_writters/create1.dart';import 'package:the_hidden_writters/detailed.dart';import 'package:the_hidden_writters/fire_api.dart';import 'package:the_hidden_writters/home.dart';import 'package:the_hidden_writters/login.dart';import 'package:firebase_database/firebase_database.dart';import 'package:firebase_database/ui/firebase_animated_list.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:path/path.dart' as pth;import 'dart:ui' as ui;import 'package:like_button/like_button.dart';import 'package:the_hidden_writters/signup.dart';import 'package:bottom_navy_bar/bottom_navy_bar.dart';class TasksPage extends StatefulWidget {  final String uid1;  final String email;  final String Name;  final String pic;  late int totalItems;  TasksPage.const1(this.totalItems, this.uid1, this.Name, this.email, this.pic);  TasksPage(      {required this.email, required this.uid1, required this.Name, required this.pic,});  @override  _TasksPageState createState() =>      _TasksPageState(this.uid1, this.email, this.Name, this.pic);}class _TasksPageState extends State<TasksPage> {  bool flag1 = true;  User? user = FirebaseAuth.instance.currentUser;  final FirebaseFirestore fb = FirebaseFirestore.instance;  late String project_name;  String email1 = '';  String email2 = '';  String pkey = '';  late Color tcolor;  int like_count = 0;  late DocumentSnapshot ds;  final String uid1;  final String Name;  final String email;  late var ref1 = FirebaseDatabase.instance.reference().child('comments');  final String pic; int commentcout =0; String comsts = ""; Color bdrcolor = Colors.white; String updatedName ='';  _TasksPageState(this.uid1, this.email, this.Name, this.pic);  void initState() {    super.initState();    getName();    ref1 = FirebaseDatabase.instance.reference().child('comments');    ref1.once().then((DataSnapshot snapshot) {      setState(() {});    });  }   getName() {   var nameref= fb.collection("users_writters").doc(uid1);   nameref.get().then((value) {     Map map={};     setState(() {       map = value.data()!;     });     updatedName = map['userkanam'];     return map;   });  }  @override  Widget build(BuildContext context) {    return Scaffold(      floatingActionButton: FloatingActionButton(        heroTag: "addButton",        backgroundColor: Colors.red,        foregroundColor: Colors.white,        child: Icon(          Icons.add,          size: 40,        ),        onPressed: () {          Navigator.push(            context,            MaterialPageRoute(builder: (_) {              return  addtask(uid1:this.uid1, email:this.email, Name:this.Name,pic:pic) ;}),);        }      ),      drawer: Drawer(        child:  ListView(          // Important: Remove any padding from the ListView.          padding: EdgeInsets.zero,          children: <Widget>[            DrawerHeader(              child: Column(                children: [                  Container(                    width: 50,                    height: 50,                    decoration: BoxDecoration(                      shape: BoxShape.circle,                      image: DecorationImage(                          image: Image.network(pic).image,                          // image: Utility.imageFromBase64String(imgString).image ,                          fit: BoxFit.fill                      ),                    ),),                  Text(Name),                ],              ),              decoration: BoxDecoration(                color: Colors.blue,              ),            ),            ListTile(              title: Text('Admin'),              onTap: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (_) {                    return addpost() ;}),);              },            ),            ListTile(              title: Text('Sign Up'),              onTap: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (_) {                    return SignUpScreen();}),);              },            ),            ListTile(              title: Text('Log Out'),              onTap: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (_) {                    return LoginScreen();}),);              },            ),            ListTile(              title: Text('Feedback'),              onTap: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (_) {                    return MyHomePage() ;}),);              },            ),          ],        ),      ),      appBar: AppBar(   title: Text(        "Hidden Writers",        style: TextStyle(          fontFamily: "tepeno",          fontWeight: FontWeight.w600,        ),      ),        actions: <Widget>[          IconButton(            icon: Icon(Icons.exit_to_app),            splashColor: Colors.transparent,            highlightColor: Colors.transparent,            onPressed: () => signOutUser().then((value) {              Navigator.of(context).pushAndRemoveUntil(                  MaterialPageRoute(builder: (context) => LoginScreen()),                      (Route<dynamic> route) => false);            }),          ),        ],        ),      body: Column(          children: [            Container(              padding: EdgeInsets.all(5),              height: 40,              width: MediaQuery.of(context).size.width-30,              child: ListView(                scrollDirection: Axis.horizontal,                children: [                  InkWell(                    child: Container(                      width  :70,                        height: 35,                        decoration: BoxDecoration(                            color: Colors.black12,                            border: Border.all(color : bdrcolor),                            borderRadius: BorderRadius.circular(10)),                        child:Center(child: (Text("All",style:TextStyle(                          fontSize: 16                        ))))                    ),                    onTap: (){                      setState(() {                        bdrcolor = Colors.red;                      });                    },                  ),                  SizedBox(width:5),                  InkWell(                    child: Container(                        width  :70,                        height: 35,                        decoration: BoxDecoration(                            color: Colors.black12,                            border: Border.all(color : bdrcolor),                            borderRadius: BorderRadius.circular(10)),                        child:Center(child: (Text("Quotes",style:TextStyle(                            fontSize: 16                        ))))                    ),                    onTap: (){                      setState(() {                        bdrcolor = Colors.red;                      });                    },                  ),                  SizedBox(width:5),                  InkWell(                    child: Container(                        width  :70,                        height: 35,                        decoration: BoxDecoration(                            color: Colors.black12,                            border: Border.all(color : bdrcolor),                            borderRadius: BorderRadius.circular(10)),                        child:Center(child: (Text("Memes",style:TextStyle(                            fontSize: 16                        ))))                    ),                    onTap: (){                      setState(() {                        bdrcolor = Colors.red;                      });                    },                  ),                  SizedBox(width:5),                  InkWell(                    child: Container(                        width  :70,                        height: 35,                        decoration: BoxDecoration(                            color: Colors.black12,                            border: Border.all(color : bdrcolor),                            borderRadius: BorderRadius.circular(10)),                        child:Center(child: (Text("Stories",style:TextStyle(                            fontSize: 16                        ))))                    ),                    onTap: (){                      setState(() {                        bdrcolor = Colors.red;                      });                    },                  ),                  SizedBox(width:5),                  InkWell(                    child: Container(                        width  :70,                        height: 35,                        decoration: BoxDecoration(                            color: Colors.black12,                            border: Border.all(color : bdrcolor),                            borderRadius: BorderRadius.circular(10)),                        child:Center(child: (Text("Products",style:TextStyle(                            fontSize: 16                        ))))                    ),                    onTap: (){                      setState(() {                        bdrcolor = Colors.red;                      });                    },                  ),                ],              ),            ),            Expanded(              child: Container(                padding: EdgeInsets.all(10),                child: FutureBuilder(                  future: getImages(),                  builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {                    if (snapshot.connectionState == ConnectionState.done) {                      return ListView.builder(                          shrinkWrap: true,                          itemCount: snapshot.data!.docs.length,                          itemBuilder: (BuildContext context, int index) {                            String picname = snapshot.data!.docs[index].data()["filename"];                            String picname1 = picname.replaceAll(".", "_");                            print(picname1);                            return Container(                              padding: EdgeInsets.only(top: 13),                              child: Column(                                children: [                                  Row(                                    children: [                                      Container(                                        width: 50,                                        height: 50,                                        decoration: BoxDecoration(                                          shape: BoxShape.circle,                                          image: DecorationImage(                                              image: Image                                                  .network(snapshot.data!.docs[index]                                                  .data()["picurl"],                                                errorBuilder: (BuildContext context,                                                    Object exception,                                                    StackTrace? stackTrace) {                                                  return const Text('😢');                                                },)                                                  .image,                                              // image: Utility.imageFromBase64String(imgString).image ,                                              fit: BoxFit.fill                                          ),                                        ),),                                      SizedBox(width: 20,),                                            Expanded(                                              child: SingleChildScrollView(                                                scrollDirection: Axis.horizontal,                                                  child: RichText(                                                    text: TextSpan(                                                     children: [                                                       TextSpan(                                                         text: snapshot.data!.docs[index]                                                             .data()["name"],                                                         style: TextStyle(color:Colors.black45,                                                         fontWeight: FontWeight.bold                                                         )                                                       ),                                                TextSpan(                                                  text : "\nSubscribe", style: TextStyle(color:Colors.red,                                                    fontWeight: FontWeight.bold                                                )                                                )]),),                                            ),                                            )],                                  ),                                  SizedBox(height: 3,),                                  Container(                                    padding: EdgeInsets.all(12),                                    height: 300,                                    width: 350,                                    child: Center(child: Image.network(                                        snapshot.data!.docs[index].data()["url"],                                        errorBuilder: (BuildContext context,                                            Object exception, StackTrace? stackTrace) {                                          return Icon(Icons.do_not_disturb);                                        },                                        fit: BoxFit.fill),                                    ),                                  ),                                  Center(                                    child: Container(                                      decoration: BoxDecoration(                                        // border: Border.all(width: 2,color: Colors.black12)                                      ),                                      child: Row(                                        children: [                                          SizedBox(width: 20,),                                          LikeButton(                                            size: 20,                                            circleColor:                                            CircleColor(start: Color(0xff00ddff),                                                end: Color(0xff0099cc)),                                            bubblesColor: BubblesColor(                                              dotPrimaryColor: Color(0xff33b5e5),                                              dotSecondaryColor: Color(0xff0099cc),                                            ),                                            likeBuilder: (bool isLiked) {                                              return Icon(                                                Icons.favorite_sharp,                                                color: isLiked                                                    ? Colors.deepPurpleAccent                                                    : Colors.grey,                                                size: 20,                                              );                                            },                                            likeCount: like_count,                                            onTap: likecout(FirebaseDatabase.instance                                                .reference()                                                .                                            child('comments')                                                .child(picname1),like_count),                                            countBuilder: (int? count, bool isLiked,                                                String text) {                                              var color = isLiked ? Colors                                                  .deepPurpleAccent : Colors.grey;                                              Widget result;                                              if (count == 0) {                                                result = Text(                                                  "love",                                                  style: TextStyle(color: color),                                                );                                              } else                                                result = Text(                                                  text,                                                  style: TextStyle(color: color),                                                );                                              return result;                                            },                                          ),                                          SizedBox(width: 28,),                                          IconButton(                                              icon: Icon(Icons.comment_sharp),                                              onPressed: () async {                                             final result=                                                await Navigator.push(                                                  context,                                                  MaterialPageRoute(builder: (_) {                                                    return combox(uid1: this.uid1,                                                        email: this.email,                                                        Name: this.Name,                                                        pic: pic,                                                        commenturl: snapshot.data!                                                            .docs[index]                                                            .data()["filename"]);                                                  }),);                                             commentcout = result;                                             print(commentcout);                                             if(commentcout!=null){                                                comsts = commentcout.toString();                                             }                                             else{                                               comsts = "1";                                             }                                                //combox(uid1:this.uid1, email:this.email, Name:this.Name,pic:pic);                                              },                                              ),                                          Text(comsts),                                          SizedBox(width: 28,),                                          IconButton(                                              icon: Icon(Icons.save_alt_sharp),                                              onPressed: () {}),                                          SizedBox(width: 28,),                                          IconButton(                                              icon: Icon(Icons.share),                                              onPressed: () {}),                                        ],                                      ),                                    ),                                  ),                                ],                              ),                            );                          });                    } else if (snapshot.connectionState == ConnectionState.none) {                      return Text("No data");                    }                    return Container(child: Center(child: CircularProgressIndicator()));                  },                ),              ),            ),          ],        ),    );  }  Future <QuerySnapshot> getImages() {    return fb.collection("data_quotes").get();  }  Color getTypeColor(String Field) {    Color color = Theme        .of(context)        .accentColor;    if (Field == 'Noun') {      color = Colors.brown;    }    if (Field == 'Pronoun') {      color = Colors.green;    }    if (Field == 'Adjective') {      color = Colors.deepOrange;    }    if (Field == 'Verbs') {      color = Colors.purple;    }    if (Field == 'Adverbs') {      color = Colors.redAccent;    }    return color;  }likecout(var ref,likecount) {  // ref.set({'likecout': likecount});  // ref.child('likes/likecout').once().then((DataSnapshot snapshot) {  //   print(snapshot.value);  //   like_count = snapshot.value;  // });}}class addtask extends StatefulWidget {  final String uid1;  final String email;  final String Name;  final String pic;  addtask(      {required this.email, required this.uid1, required this.Name, required this.pic});  @override  _addtaskState createState() =>      _addtaskState(this.email, this.uid1, this.Name, this.pic);}class _addtaskState extends State<addtask> {  ScreenshotController screenshotController = ScreenshotController();  GlobalKey image_widget = GlobalKey();  String loading_sts = '';  String qoute = '';  late TextEditingController Qoute;  String _typeSelected = '';  late DatabaseReference _ref;  Color text_color = Colors.black;  Color bg_color = Colors.white;  late Uint8List capimage;  late File savedImage;  final FirebaseFirestore fb = FirebaseFirestore.instance;  User? user = FirebaseAuth.instance.currentUser;  UploadTask? task;  final String uid1;  final String email;  final String Name;  final String pic;  String imgstr = 'https://firebasestorage.googleapis.com/v0/b/the-hidden-writters.appspot.com/o/themes%2FScreenshot_2021-07-20-20-29-19-13.jpg2021-07-20%2020%3A29%3A50.808628-img.png?alt=media&token=cef9665a-873a-44b5-b1ba-4ef56952cd1e';  double xpos = 0;  double ypos = 0;  double left =0,right=0,top=0,bottom=0;  FontWeight bold = FontWeight.normal;  String upload_sts = "Qoutes Production";  Alignment upperBtnAlign = Alignment(0.905, 0.954);  Alignment lowerBtnAlign = Alignment(0.905, 0.954);  bool fabClick = false;  File? file;  late OverlayEntry overlayEntry =OverlayEntry(builder: (BuildContext context) { return Container(); });  double overlayWidth = 50;  Offset offset = Offset.zero;  void changeBtnAlign() {    if (fabClick)      setState(() {        upperBtnAlign = Alignment(0.7, 0.7);        lowerBtnAlign = Alignment(0.4, 0.85);      });    else {      setState(() {        upperBtnAlign = Alignment(0.905, 0.954);        lowerBtnAlign = Alignment(0.905, 0.954);      });    }  }  _addtaskState(this.email, this.uid1, this.Name, this.pic);  void initState() {    super.initState();    Qoute = TextEditingController();    _ref = FirebaseDatabase.instance.reference().child(        'Engineer29_db/projets_iotinns').child(user!.uid);    _ref.once().then((DataSnapshot snapshot) {      setState(() {});    });  }  Future <QuerySnapshot> getImages() {    return fb.collection("themes").get();  }  Widget bgimage(String title) {    return InkWell(        child: Container(            width: 65,            height: 50,            decoration: BoxDecoration(              shape: BoxShape.circle,              image: DecorationImage(                  image: AssetImage(title),                  fit: BoxFit.fill              ),            )),        onTap: () {          setState(() {            imgstr = title;          });}    );  }  Widget _buildContactType1(Color title) {    return InkWell(        child: Container(          width: 25,          height: 15,          decoration: BoxDecoration(              shape: BoxShape.circle,              color: title          ),),        onTap: () {          setState(() {            setState(() {              text_color = title;            });            _typeSelected = 'abhi nahi';          });        }    );  }  @override  Widget build(BuildContext context) {    return Scaffold(      drawer: Drawer(        child:  ListView(          // Important: Remove any padding from the ListView.          padding: EdgeInsets.zero,          children: <Widget>[            DrawerHeader(              child: Column(                children: [                  Container(                    width: 50,                    height: 50,                    decoration: BoxDecoration(                      shape: BoxShape.circle,                      image: DecorationImage(                          image: Image.network(pic).image,                          // image: Utility.imageFromBase64String(imgString).image ,                          fit: BoxFit.fill                      ),                    ),),                  Text(Name),                ],              ),              decoration: BoxDecoration(                color: Colors.blue,              ),            ),            ListTile(              title: Text('Home'),              onTap: () {                // Navigator.push(                //   context,                //   MaterialPageRoute(builder: (_) {                //     return live_home() ;}),);              },            ),            ListTile(              title: Text('Sign Up'),              onTap: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (_) {                    return SignUpScreen();}),);              },            ),            ListTile(              title: Text('Log Out'),              onTap: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (_) {                    return LoginScreen();}),);              },            ),            ListTile(              title: Text('Feedback'),              onTap: () {                // Navigator.push(                //   context,                //   MaterialPageRoute(builder: (_) {                //     return live_home() ;}),);              },            ),          ],        ),      ),      appBar: AppBar(   title:        task != null ? buildUploadStatus(task!) : Container(),        actions: <Widget>[         InkWell(          onTap: postData,             child: Padding(               padding: const EdgeInsets.all(8.0),               child: Center(                 child: Text("Save",                   style: TextStyle(                     fontSize: 18,                     fontWeight: FontWeight.bold                   ),                 ),               ),             ))        ],),      body: Container(            //width: MediaQuery.of(context).size.width,            //height: MediaQuery.of(context).size.height,            margin: EdgeInsets.all(15),            child: Column(              children: [                Expanded(                  child: SingleChildScrollView(                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Stack(children: [                          Positioned(                            child:                            Screenshot(                              controller: screenshotController,                              child: Container(                                decoration: BoxDecoration(                                  borderRadius: BorderRadius.circular(15),                                  image: DecorationImage(image: NetworkImage(imgstr),                                      fit: BoxFit.scaleDown                                  ),                                ),                                height: 300,                                width: 350,                                child: Container(                                    padding: EdgeInsets.fromLTRB(left,top,right,bottom),                                    child: Center(child: Text(                                    qoute, style: TextStyle(                                    color: text_color,                                  fontWeight: bold,                                )                                ))),                              ),                            ),                          )  ]),                        Row(                          children: [                            Container(                              height: 75,                              width: 280,                              child: TextFormField(                                maxLines: 3,                                controller: Qoute,                                decoration: InputDecoration(                                    fillColor: Colors.white,                                    filled: true,                                    contentPadding: EdgeInsets.all(15),                                    hintText: "Write here...and press save"                                ),                                validator: (_val) {                                  if (_val!.isEmpty) {                                    return "Can't Be Empty";                                  } else {                                    return null;                                  }                                },),                            ),                            SizedBox(width: 5,),                            Container(                              height: 50,                              width: 40,                              child: Center(                                child: IconButton(                                    iconSize: 30,                                    icon: Icon(                                      Icons.arrow_forward_ios, color: Colors.teal,),                                    splashColor: Colors.transparent,                                    highlightColor: Colors.transparent,                                    onPressed: () {                                      saveData();                                     // overlayEntry = _showOverlay();                                    //  Overlay.of(context)!.insert(overlayEntry);                                    }                                ),                              ),                              decoration: BoxDecoration(                                border: Border.all(width: 2, color: Colors.teal),                                shape: BoxShape.circle,                              ),                            ),                          ],                        ),                        Container(                            width: MediaQuery.of(context).size.width,                            child: Row(                                children:[                                  Container(                                    height: 50,                                    width: MediaQuery.of(context).size.width-30,                                    child: ListView(                                      scrollDirection: Axis.horizontal,                                      children: [                                        IconButton(                                            icon: Icon(                                              Icons.arrow_drop_down, color: Colors.teal,),                                            splashColor: Colors.transparent,                                            highlightColor: Colors.transparent,                                            onPressed: () {                                              padding_text("up");                                            }),                                        IconButton(                                            icon: Icon(                                              Icons.arrow_drop_up_outlined, color: Colors.teal,),                                            splashColor: Colors.transparent,                                            highlightColor: Colors.transparent,                                            onPressed: () {                                              padding_text("down");                                            }                                        ),                                        IconButton(                                            iconSize: 20,                                            icon: Icon(                                              Icons.arrow_back_ios, color: Colors.teal,),                                            splashColor: Colors.transparent,                                            highlightColor: Colors.transparent,                                            onPressed: () {                                              padding_text("right");                                            }),                                        IconButton(                                            iconSize: 20,                                            icon: Icon(                                              Icons.arrow_forward_ios, color: Colors.teal,),                                            splashColor: Colors.transparent,                                            highlightColor: Colors.transparent,                                            onPressed: () {                                              padding_text("left");                                            }                                        ),                                        IconButton(                                            iconSize: 20,                                            icon: Icon(                                              Icons.format_bold_rounded, color: Colors.teal,),                                            splashColor: Colors.transparent,                                            highlightColor: Colors.transparent,                                            onPressed: () {                                              padding_text("bold");                                            }),                                        _buildContactType1(Colors.deepPurple),                                        SizedBox(width: 10,),                                        _buildContactType1(Colors.teal),                                        SizedBox(width: 10,),                                        _buildContactType1(Colors.deepOrange),                                        SizedBox(width: 10,),                                        //---------------------                                        _buildContactType1(Colors.black,),                                        SizedBox(width: 10,),                                        _buildContactType1(Colors.white),                                        SizedBox(width: 10,),                                        _buildContactType1(Colors.yellowAccent),                                        SizedBox(width: 10,),                                      ],                                    ),                                  ),                                ]                            )),                        SizedBox(height: 10,),                        Row(                          children: [                            Container(                              height: 140,                              width: MediaQuery.of(context).size.width -30,                              child: FutureBuilder(                                future: getImages(),                                builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {                                  if (snapshot.connectionState == ConnectionState.done) {                                    return GridView.builder(                                        shrinkWrap: true,                                        itemCount: snapshot.data!.docs.length,                                        itemBuilder: (BuildContext context, int index) {                                          return GestureDetector(                                              onTap:(){                                                setimg(snapshot.data!.docs[index].data()["url"]);                                              },                                              child: Container(                                                padding: EdgeInsets.all(2),                                                child: Container(                                                    decoration: BoxDecoration(                                                       // color: Colors.orangeAccent,                                                        borderRadius: BorderRadius.circular(15)),                                                    height: 30,                                                    width: 30,                                                    child: Center(child: Image.network(                                                        snapshot.data!.docs[index].data()["url"],                                                        errorBuilder: (BuildContext context,                                                            Object exception, StackTrace? stackTrace) {                                                          return Icon(Icons.do_not_disturb);                                                        },                                                        fit: BoxFit.fill),                                                    )),                                              ));                                        }, gridDelegate:  SliverGridDelegateWithFixedCrossAxisCount(                                      crossAxisCount: 4,));                                  } else if (snapshot.connectionState == ConnectionState.none) {                                    return Text("No data");                                  }                                  return Text("Loading.......");                                },                              ),                            ),                          ],                        ),                        task != null ? buildUploadStatus(task!) : Container()                      ],                    ),                  ),                ),              ],            ),),    );  }  /*  OverlayEntry _showOverlay() {    OverlayEntry overlayEntry = OverlayEntry(builder: (context) {      double dx = 0.0;      double dy = 0.0;      if ((offset.dx > 0) &&          ((offset.dx + overlayWidth) < MediaQuery.of(context).size.width)) {        dx = offset.dx;      } else if ((offset.dx + overlayWidth) >=          MediaQuery.of(context).size.width) {        dx = MediaQuery.of(context).size.width - overlayWidth;      } else {        dx = 0;      }      if ((offset.dy > 0) &&          ((offset.dy + overlayWidth) < MediaQuery.of(context).size.height)) {        dy = offset.dy;      } else if ((offset.dy + overlayWidth) >=          MediaQuery.of(context).size.height) {        dy = MediaQuery.of(context).size.height - overlayWidth;      } else {        dy = 0;      }      return new Positioned(        top: dy,        left: dx,        child: Draggable(          feedback: Material(child: qoutenew(),type: MaterialType.transparency),          child: Material(child: qoutenew(),type: MaterialType.transparency),          childWhenDragging: Container(),          onDraggableCanceled: (Velocity velocity, Offset offset) {            setState(() {              this.offset = offset;            });          },        ),      );    });    return overlayEntry;  }  */  Widget qoutenew(){    return Container(        padding: EdgeInsets.fromLTRB(10, 100, 10,   500),        child: Center(child: Text(qoute, style: TextStyle(        color: text_color,        fontWeight: bold,        //backgroundColor: Colors.black,        fontSize: 18    ),)));  }  saveData() {    if (Qoute.text != null) {      setState(() {        qoute = Qoute.text;      });    }  }  setimg(url){    setState(() {      imgstr = url;    });  }  padding_text(String dir) {    if(dir=='bold'){      setState(() {        bold = FontWeight.bold;      });    }    if(dir=='left'){      setState(() {        left=left+10;        right =0;      });    }    if(dir=='right'){      setState(() {        right=right+10;        left = 0;      });    }    if(dir=='up'){      setState(() {        top=top+10;        bottom = 0;      });    }    if(dir=='down'){      setState(() {        bottom=bottom+10;        top=0;      });    }  }  postData() {    String newuid = uid1.toString().substring(1, 6);    screenshotController.capture().then((image) async {      setState(() {        capimage = image!;      });      DateTime now = DateTime.now();      String strdate = now.toString();      final fileName = "$newuid-$strdate-img.png";      final destination = 'files/$fileName';      task = FirebaseApi.uploadBytes(destination, capimage);      if (task == null) return;      final snapshot = await task!.whenComplete(() {});      final urlDownload = await snapshot.ref.getDownloadURL();      print('Download-Link: $urlDownload');      print("destination: $destination");      if (urlDownload != null) {        await FirebaseFirestore.instance            .collection("data_quotes")            .add({          "userkiid": uid1,          "url": urlDownload,          "name": Name,          "picurl": pic,          "filename": fileName,          "Categories": 'Quotes'        });        print('Yay! Success');      }      else {        print(            'Error from image repo ${snapshot.state.toString()}');        throw ('This file is not an image');      }      Navigator.push(        context,        MaterialPageRoute(builder: (_) {          return homePage(email: email, uid1: uid1, Name: Name, pic: pic);        }),);    }    ).catchError((onError) {      print(onError);    });    //-----------------------  }  Widget buildUploadStatus(UploadTask task) => StreamBuilder<TaskSnapshot>(    stream: task.snapshotEvents,    builder: (context, snapshot) {      if (snapshot.hasData) {        final snap = snapshot.data!;        final progress = snap.bytesTransferred / snap.totalBytes;        final percentage = (progress * 100).toStringAsFixed(2);        return Text(          '$percentage %',          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),        );      } else {        return Container();      }    },  );}